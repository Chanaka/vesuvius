Log of all Changes to the PL.nlm.nih.gov database(s)
----------------------------------------------------

2011:0329 Leif
--------------

Modified delete_pfif_person procedure so it wouldn't delete OUR registered users:

DELETE p.* FROM person_uuid p, person_to_report pr WHERE pr.rep_uuid = p.p_uuid AND pr.p_uuid = id AND pr.rep_uuid NOT IN (SELECT p_uuid FROM users);
                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Also added these columns for PFIF 1.3:

ALTER TABLE `pfif_person` ADD `full_name` VARCHAR( 128 ) NULL DEFAULT NULL
AFTER `source_url`

ALTER TABLE `pfif_person` ADD `expiry_date` DATETIME NULL DEFAULT NULL
AFTER `entry_date`

ALTER TABLE `person_uuid` ADD `expiry_date` DATETIME NULL DEFAULT NULL 

2012:0425 Greg
--------------
ALTER TABLE  `hospital` ADD  `www` VARCHAR( 256 ) NULL DEFAULT NULL AFTER  `email`;
ALTER TABLE  `hospital` ADD  `patient_id_suffix_variable` INT NOT NULL DEFAULT  '1' AFTER  `patient_id_prefix` ,
ADD  `patient_id_suffix_fixed_length` INT NOT NULL DEFAULT  '0' AFTER  `patient_id_suffix_variable` ;

2012:0413 Greg
--------------

DELETE FROM  `contact` WHERE contact_value =  'unknown';


ALTER TABLE  `users` CHANGE  `changed_timestamp`  `changed_timestamp` BIGINT( 20 ) NOT NULL DEFAULT  '0';
INSERT INTO `person_uuid` (`p_uuid`, `full_name`, `family_name`, `l10n_name`, `custom_name`, `given_name`, `incident_id`, `hospital_uuid`) VALUES ('3', 'Anonymous User', 'User', NULL, NULL, 'Anonymous', 0, NULL);
INSERT INTO `users` (`user_id`, `p_uuid`, `user_name`, `password`, `salt`, `changed_timestamp`, `status`, `confirmation`) VALUES ('3', '3', 'anonymous', NULL, NULL, '0', 'active', NULL);
INSERT INTO `sys_user_to_group` (`group_id`, `p_uuid`) VALUES ('3', '3');


2012:0412 Greg
--------------
UPDATE `person_uuid` SET `hospital_uuid` = NULL WHERE `hospital_uuid` = '-1';
DELETE FROM `hospital` WHERE `hospital`.`hospital_uuid` = -1;
DELETE FROM `field_options` WHERE `field_name` = 'opt_blood_type';
DELETE FROM `field_options` WHERE `field_name` = 'opt_id_type';
DELETE FROM `field_options` WHERE `field_name` = 'opt_relationship_type';
DELETE FROM `field_options` WHERE `field_name` = 'opt_marital_status' ;

UPDATE  `field_options` SET  `option_code` = NULL WHERE  `field_options`.`field_name` =  'opt_skin_color' AND  `field_options`.`option_code` =  'UNK' AND  `field_options`.`option_description` =  'Unknown' AND `field_options`.`display_order` IS NULL LIMIT 1 ;
UPDATE  `field_options` SET  `option_code` = NULL WHERE  `field_options`.`field_name` =  'opt_religion' AND  `field_options`.`option_code` =  'UNK' AND  `field_options`.`option_description` =  'Unknown' AND `field_options`.`display_order` =15 LIMIT 1 ;
UPDATE  `field_options` SET  `option_code` = NULL WHERE  `field_options`.`field_name` =  'opt_race' AND  `field_options`.`option_code` =  'U' AND  `field_options`.`option_description` =  'Unknown' AND `field_options`.`display_order` IS NULL LIMIT 1 ;
UPDATE  `field_options` SET  `option_code` = NULL WHERE  `field_options`.`field_name` =  'opt_hair_color' AND  `field_options`.`option_code` =  'UNK' AND  `field_options`.`option_description` =  'Unknown' AND `field_options`.`display_order` IS NULL LIMIT 1 ;
UPDATE  `field_options` SET  `option_code` = NULL WHERE  `field_options`.`field_name` =  'opt_gender' AND  `field_options`.`option_code` =  'unk' AND  `field_options`.`option_description` =  'Unknown' AND `field_options`.`display_order` IS NULL LIMIT 1 ;
UPDATE  `field_options` SET  `option_code` = NULL WHERE  `field_options`.`field_name` =  'opt_eye_color' AND  `field_options`.`option_code` =  'UNK' AND  `field_options`.`option_description` =  'Unknown' AND `field_options`.`display_order` IS NULL LIMIT 1 ;

INSERT INTO  `field_options` (`field_name` ,`option_code` ,`option_description` ,`display_order`) VALUES ('opt_country', NULL ,  'Unknown', NULL );


2011:0411 Greg
--------------
ALTER TABLE `plus_access_log` DROP `api_key`;
ALTER TABLE  `plus_access_log` ADD  `api_version` VARCHAR( 8 ) NULL DEFAULT NULL ;


2011:0408 Greg
--------------
[mysqld_safe]
timezone=UTC

ALTER TABLE  `person_details` ADD  `last_seen` TEXT NULL DEFAULT NULL ,
ADD  `last_clothing` TEXT NULL DEFAULT NULL ,
ADD  `other_comments` TEXT NULL DEFAULT NULL;

ALTER TABLE  `person_status` CHANGE  `last_updated`  `last_updated` DATETIME NULL DEFAULT NULL ,
CHANGE  `creation_time`  `creation_time` DATETIME NULL DEFAULT NULL;

DROP TABLE  `person_missing`;


2011:0407 Greg
--------------
ALTER TABLE  `incident` CHANGE  `closed`  `closed` TINYINT( 1 ) NOT NULL DEFAULT  '0';
ALTER TABLE  `incident` ADD  `external_report` VARCHAR( 8192 ) NULL DEFAULT NULL;

2011:0401 Greg
--------------
ALTER TABLE  `person_status` CHANGE  `updated_server`  `creation_time` TIMESTAMP NULL DEFAULT NULL ;
ALTER TABLE  `person_status` CHANGE  `updated`  `last_updated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ;


2011:0331 Leif
--------------

pfif_person.home_postal_code changed from int(11) to varchar(16)

pfif_note.found change from tinyint(1) to varchar(5)

added index on contact.contact_value and contact.opt_contact_type (since these are search fields)

made index on p_uuid unique for person_details, person_physical, person_missing


2011:0329 Leif
--------------

I removed foreign constraints for pfif_note so that importing of notes could
occur whether the parent person was already imported or not. Otherwise coordinating
the import of persons and notes without missing some of the latter was difficult.

  ALTER TABLE pfif_note DROP FOREIGN KEY `pfif_note_ibfk_3`
  ALTER TABLE pfif_note DROP FOREIGN KEY `pfif_note_ibfk_1`

2011:0329 Leif
--------------

Added a routine to aid pruning of inactive person records.

CREATE PROCEDURE delete_pfif_person(IN id VARCHAR(128))
BEGIN

-- Delete reporter from contact
DELETE c.* FROM contact c, person_to_report pr WHERE pr.rep_uuid = c.pgoc_uuid AND pr.p_uuid = id;

-- Delete reporter from location_details
DELETE ld.* FROM location_details ld, person_to_report pr WHERE pr.rep_uuid = ld.poc_uuid AND pr.p_uuid = id;

-- Delete reporter from person_uuid (child tables: person_status)
DELETE p.* FROM person_uuid p, person_to_report pr WHERE pr.rep_uuid = p.p_uuid AND pr.p_uuid = id;

-- Delete person from person_uuid (child tables: person_status, person_missing, person_to_report, person_details, person_physical)
DELETE person_uuid.* FROM person_uuid WHERE p_uuid = id;

-- Delete person from pfif_person
DELETE pfif_person.* FROM pfif_person WHERE p_uuid = id;

-- Delete note from pfif_note
DELETE pfif_note.* FROM pfif_note WHERE p_uuid = id;

-- Set to null linked records in pfif_note
UPDATE pfif_note SET linked_person_record_id = NULL WHERE p_uuid = id;

-- Delete person from contact
DELETE contact.* FROM contact WHERE pgoc_uuid = id;

-- Delete person from image
DELETE image.* from image where x_uuid = id;

END

2011:0325 Leif
----------------

I expanded all columns holding a person or note uuid from
VARCHAR(60) to VARCHAR(128).

ALTER TABLE `person_uuid` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `contact` CHANGE `pgoc_uuid` `pgoc_uuid` VARCHAR( 128 )

ALTER TABLE `location_details` CHANGE `poc_uuid` `poc_uuid` VARCHAR( 128 )

ALTER TABLE `person_details` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 ),
CHANGE `next_kin_uuid` `next_kin_uuid` VARCHAR( 128 )

ALTER TABLE `person_followers` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 ),
CHANGE `follower_p_uuid` `follower_p_uuid` VARCHAR( 128 )

ALTER TABLE `person_missing` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `person_physical` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `person_status` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `person_to_report` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 ),,,,,,,,
CHANGE `rep_uuid` `rep_uuid` VARCHAR( 128 )

ALTER TABLE `person_updates` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 ),
CHANGE `updated_by_p_uuid` `updated_by_p_uuid` VARCHAR( 128 )

ALTER TABLE `pfif_note` CHANGE `note_record_id` `note_record_id` VARCHAR( 128),
CHANGE `p_uuid` `p_uuid` VARCHAR( 128 ),
CHANGE `linked_person_record_id` `linked_person_record_id` VARCHAR( 128 )

ALTER TABLE `pfif_person` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `audit` CHANGE `x_uuid` `x_uuid` VARCHAR( 128 ),
CHANGE `u_uuid` `u_uuid` VARCHAR( 128 )

ALTER TABLE `image` CHANGE `x_uuid` `x_uuid` VARCHAR( 128 )

ALTER TABLE `mpres_log` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `password_event_log` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `person_deceased` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `phonetic_word` CHANGE `pgl_uuid` `pgl_uuid` VARCHAR( 128 )

ALTER TABLE `plus_report_log` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `rap_log` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `users` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `sys_user_to_group` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `user_preference` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `voice_note` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

ALTER TABLE `alt_logins` CHANGE `p_uuid` `p_uuid` VARCHAR( 128 )

2011:0324 Greg
----------------

drop table `sys_data_classifications`;
drop table `sys_group_to_data_classification`;


2011:0323 Greg
----------------

INSERT INTO  `field_options` (
`field_name` ,
`option_code` ,
`option_description` ,
`display_order`
)
VALUES (
'opt_status',  'unk',  'Unknown', NULL
);


INSERT INTO  `field_options` (
`field_name` ,
`option_code` ,
`option_description` ,
`display_order`
)
VALUES (
'opt_status',  'fnd',  'Found', NULL
);


DROP TABLE  `resource_to_incident`;

DROP TABLE  `person_to_hospital`;



2011:0321 Leif
----------------

DROP TABLE pfif_xml;

CREATE TABLE `pfif_person` (
  `p_uuid` varchar(60) NOT NULL,
  `source_version` varchar(10) NOT NULL,
  `source_repository_id` int(11) NOT NULL,
  `entry_date` datetime NOT NULL,
  `author_name` varchar(100) default NULL,
  `author_email` varchar(100) default NULL,
  `author_phone` varchar(100) default NULL,
  `source_name` varchar(100) default NULL,
  `source_date` datetime default NULL,
  `source_url` varchar(512) default NULL,
  `first_name` varchar(100) default NULL,
  `last_name` varchar(100) default NULL,
  `home_city` varchar(100) default NULL,
  `home_state` varchar(15) default NULL,
  `home_country` varchar(2) default NULL,
  `home_neighborhood` varchar(100) default NULL,
  `home_street` varchar(100) default NULL,
  `home_postal_code` int(11) default NULL,
  `photo_url` varchar(512) default NULL,
  `sex` varchar(10) default NULL,
  `date_of_birth` date default NULL,
  `age` varchar(10) default NULL,
  `other` text,
  PRIMARY KEY  (`p_uuid`),
  KEY `source_repository_id` (`source_repository_id`),
  KEY `source_repository_id_2` (`source_repository_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE pfif_note (
  note_record_id varchar(60) NOT NULL,
  p_uuid varchar(60) NOT NULL,
  source_version varchar(10) NOT NULL,
  source_repository_id int(11) NOT NULL,
  linked_person_record_id varchar(60) default NULL,
  entry_date datetime NOT NULL,
  author_name varchar(100) default NULL,
  author_email varchar(100) default NULL,
  author_phone varchar(100) default NULL,
  source_date datetime NOT NULL,
  `found` tinyint(1) default NULL,
  `status` varchar(20) default NULL,
  email_of_found_person varchar(100) default NULL,
  phone_of_found_person varchar(100) default NULL,
  last_known_location text,
  `text` text,
  PRIMARY KEY  (note_record_id),
  KEY source_repository_id (source_repository_id),
  KEY linked_person_record_id (linked_person_record_id),
  KEY p_uuid (p_uuid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE `pfif_note`
  ADD CONSTRAINT `pfif_note_ibfk_3` FOREIGN KEY (`linked_person_record_id`) REFERENCES `pfif_person` (`p_uuid`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `pfif_note_ibfk_1` FOREIGN KEY (`p_uuid`) REFERENCES `pfif_person` (`p_uuid`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `pfif_note_ibfk_2` FOREIGN KEY (`source_repository_id`) REFERENCES `pfif_repository` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TABLE pfif_harvest_log;

CREATE TABLE `pfif_harvest_person_log` (
  `log_index` int(11) NOT NULL auto_increment,
  `repository_id` int(11) default '0',
  `direction` varchar(3) NOT NULL default 'in',
  `status` varchar(10) NOT NULL,
  `start_mode` varchar(10) NOT NULL,
  `start_time` datetime default NULL,
  `end_time` datetime default NULL,
  `first_entry` datetime NOT NULL,
  `last_entry` datetime NOT NULL,
  `last_count` int(11) default '0',
  `person_count` int(11) default '0',
  `images_in` int(11) default '0',
  `images_retried` int(11) default '0',
  `images_failed` int(11) default '0',
  PRIMARY KEY  (`log_index`),
  KEY `repository_id` (`repository_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8;

ALTER TABLE `pfif_harvest_person_log`
  ADD CONSTRAINT `pfif_harvest_person_log_ibfk_1` FOREIGN KEY (`repository_id`) REFERENCES `pfif_repository` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `pfif_harvest_person_log_ibfk_2` FOREIGN KEY (`repository_id`) REFERENCES `pfif_repository` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE TABLE `pfif_harvest_note_log` (
  `log_index` int(11) NOT NULL auto_increment,
  `repository_id` int(11) default '0',
  `direction` varchar(3) NOT NULL default 'in',
  `status` varchar(10) NOT NULL,
  `start_mode` varchar(10) NOT NULL,
  `start_time` datetime default NULL,
  `end_time` datetime default NULL,
  `first_entry` datetime NOT NULL,
  `last_entry` datetime NOT NULL,
  `last_count` int(11) default '0',
  `note_count` int(11) default '0',
  PRIMARY KEY  (`log_index`),
  KEY `repository_id` (`repository_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8;

ALTER TABLE `pfif_harvest_note_log`
  ADD CONSTRAINT `pfif_harvest_note_log_ibfk_1` FOREIGN KEY (`repository_id`) REFERENCES `pfif_repository` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `pfif_harvest_note_log_ibfk_2` FOREIGN KEY (`repository_id`) REFERENCES `pfif_repository` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

2011:0314 Merwan
----------------

ALTER TABLE `person_uuid` ADD `hospital_uuid` VARCHAR(60) NULL DEFAULT NULL;
ALTER TABLE `person_uuid` ADD `incident_id` BIGINT(20) NULL DEFAULT NULL;

UPDATE person_uuid p, resource_to_incident rti
   SET p.incident_id = rti.incident_id
 WHERE p.p_uuid = rti.x_uuid;

ALTER TABLE `pltest3`.`image` DROP INDEX `image`,
 ADD UNIQUE INDEX `image` USING BTREE(`x_uuid`);

ALTER TABLE `pltest3`.`person_uuid` DROP INDEX `search_index`,
 ADD UNIQUE INDEX `search_index` USING BTREE(`p_uuid`, `full_name`, `incident_id`, `hospital_uuid`);

ALTER TABLE `pltest3`.`person_details` DROP INDEX `search_index`,
 ADD UNIQUE INDEX `search_index` USING BTREE(`p_uuid`, `opt_age_group`, `opt_gender`, `years_old`);

ALTER TABLE `pltest3`.`person_status` DROP INDEX `search_index`,
 ADD INDEX `search_index` USING BTREE(`opt_status`, `updated`, `isvictim`);

DELIMITER $$

DROP PROCEDURE IF EXISTS `PLSearch` $$
CREATE DEFINER=`mrodriguez`@`130.14.10%` PROCEDURE `PLSearch`(IN searchTerms CHAR(255),
	 IN statusFilter VARCHAR(100),
	 IN genderFilter VARCHAR(100),
	 IN ageFilter VARCHAR(100),
	 IN hospitalFilter VARCHAR(100),
	 IN incident VARCHAR(100),
	 IN sortBy VARCHAR(100),
	 IN pageStart INT,
	 IN perPage INT,
   OUT rowsFound INT,
   OUT totalRows INT)
BEGIN

  SET @sqlString = "

	SELECT SQL_CALC_FOUND_ROWS * FROM (
		SELECT
				`a`.`p_uuid`       AS `p_uuid`,
				`a`.`full_name`    AS `full_name`,
				`a`.`given_name`   AS `given_name`,
				`a`.`family_name`  AS `family_name`,
				(CASE WHEN `b`.`opt_status` NOT IN ('ali', 'mis', 'inj', 'dec', 'unk') OR `b`.`opt_status` IS NULL THEN 'unk' ELSE `b`.`opt_status` END) AS `opt_status`,
        DATE_FORMAT(b.updated, '%m/%e/%y @ %l:%i:%s %p') as updated,
				(CASE WHEN `c`.`opt_gender` NOT IN ('mal', 'fml') OR `c`.`opt_gender` IS NULL THEN 'unk' ELSE `c`.`opt_gender` END) AS `opt_gender`,
				(CASE WHEN CAST(`c`.`years_old` AS UNSIGNED) < 18 THEN 'child' WHEN CAST(`c`.`years_old` AS UNSIGNED) >= 18 THEN 'adult' ELSE 'unknown' END) as `age_group`,
				`i`.`image_height` AS `image_height`,
				`i`.`image_width`  AS `image_width`,
				`i`.`url_thumb`    AS `url_thumb`,
				(CASE WHEN `h`.`short_name` NOT IN ('nnmc', 'suburban') OR `h`.`short_name` IS NULL THEN 'other' ELSE `h`.`short_name` END)  AS `hospital`,
				(CASE WHEN (`h`.`hospital_uuid` = -(1)) THEN NULL ELSE `h`.`icon_url` END) AS `icon_url`,
				`inc`.`shortname`  AS `shortname`
		   FROM `person_uuid` `a`
		   JOIN `person_status` `b`          ON (`a`.`p_uuid` = `b`.`p_uuid` AND `b`.`isVictim` = 1)
	  LEFT JOIN `image` `i`                  ON `a`.`p_uuid` = `i`.`x_uuid`
		   JOIN `person_details` `c`         ON `a`.`p_uuid` = `c`.`p_uuid`
		   JOIN `incident` `inc`             ON `inc`.`incident_id` = `a`.`incident_id`
	  LEFT JOIN `hospital` `h`               ON `h`.`hospital_uuid` = `a`.`hospital_uuid`
	) as t
	  WHERE INSTR(?, t.opt_status)
	    AND INSTR(?, t.opt_gender)
		  AND INSTR(?, t.age_group)
		  AND INSTR(?, t.hospital)
	    AND t.`shortname` = ?
      AND (t.full_name like CONCAT('%', ?, '%') OR t.given_name SOUNDS LIKE ? OR t.family_name SOUNDS LIKE ?)

     ORDER BY CASE WHEN t.full_name like CONCAT(?, ' %') THEN 0
               WHEN t.full_name like CONCAT(?, '%') THEN 1
               WHEN t.full_name like CONCAT('% ', ?, '%') THEN 2
               WHEN t.given_name SOUNDS LIKE ? THEN 3
               WHEN t.family_name SOUNDS LIKE ? THEN 4
               ELSE 5
              END,
              ?
    LIMIT ?, ?;";

  PREPARE stmt FROM @sqlString;

  SET @searchTerms = searchTerms;
  SET @statusFilter = statusFilter;
  SET @genderFilter = genderFilter;
  SET @ageFilter = ageFilter;
  SET @hospitalFilter = hospitalFilter;
  SET @incident = incident;
  SET @sortBy = sortBy;
  SET @pageStart = pageStart;
  SET @perPage = perPage;

  EXECUTE stmt USING @statusFilter, @genderFilter, @ageFilter, @hospitalFilter, @incident,
                     @searchTerms, @searchTerms,@searchTerms,@searchTerms,
                     @searchTerms, @searchTerms,@searchTerms,@searchTerms,
                     @sortBy, @pageStart, @perPage;

  DEALLOCATE PREPARE stmt;

  SELECT FOUND_ROWS() INTO rowsFound;

  SELECT COUNT(*) INTO totalRows
    FROM person_uuid p
    JOIN incident i
      ON p.incident_id = i.incident_id
   WHERE i.shortname = incident;



END $$

DELIMITER ;


DELIMITER $$

DROP PROCEDURE IF EXISTS `PLSearchLastUpdate` $$
CREATE DEFINER=`mrodriguez`@`130.14.10%` PROCEDURE `PLSearchLastUpdate`(IN searchTerms CHAR(255),
	 IN statusFilter VARCHAR(100),
	 IN genderFilter VARCHAR(100),
	 IN ageFilter VARCHAR(100),
	 IN hospitalFilter VARCHAR(100),
	 IN incident VARCHAR(100))
BEGIN

  SET @sqlString = "

	SELECT DATE_FORMAT(MAX(t.updated), '%m/%e/%y @ %l:%i:%s %p') as updated FROM (
		SELECT
				`a`.`p_uuid`       AS `p_uuid`,
				`a`.`full_name`    AS `full_name`,
				`a`.`given_name`   AS `given_name`,
				`a`.`family_name`  AS `family_name`,
        `b`.`updated`,
				(CASE WHEN `b`.`opt_status` NOT IN ('ali', 'mis', 'inj', 'dec', 'unk') OR `b`.`opt_status` IS NULL THEN 'unk' ELSE `b`.`opt_status` END) AS `opt_status`,
				(CASE WHEN `c`.`opt_gender` NOT IN ('mal', 'fml') OR `c`.`opt_gender` IS NULL THEN 'unk' ELSE `c`.`opt_gender` END) AS `opt_gender`,
				(CASE WHEN CAST(`c`.`years_old` AS UNSIGNED) < 18 THEN 'child' WHEN CAST(`c`.`years_old` AS UNSIGNED) >= 18 THEN 'adult' ELSE 'unknown' END) as `age_group`,
				`i`.`image_height` AS `image_height`,
				`i`.`image_width`  AS `image_width`,
				`i`.`url_thumb`    AS `url_thumb`,
				(CASE WHEN `h`.`short_name` NOT IN ('nnmc', 'suburban') OR `h`.`short_name` IS NULL THEN 'other' ELSE `h`.`short_name` END)  AS `hospital`,
				(CASE WHEN (`h`.`hospital_uuid` = -(1)) THEN NULL ELSE `h`.`icon_url` END) AS `icon_url`,
				`inc`.`shortname`  AS `shortname`
		   FROM `person_uuid` `a`
		   JOIN `person_status` `b`          ON (`a`.`p_uuid` = `b`.`p_uuid` AND `b`.`isVictim` = 1)
	  LEFT JOIN `image` `i`                  ON `a`.`p_uuid` = `i`.`x_uuid`
		   JOIN `person_details` `c`         ON `a`.`p_uuid` = `c`.`p_uuid`
		   JOIN `incident` `inc`             ON `inc`.`incident_id` = `a`.`incident_id`
	  LEFT JOIN `hospital` `h`               ON `h`.`hospital_uuid` = `a`.`hospital_uuid`
	) as t
	  WHERE INSTR(?, t.opt_status)
	    AND INSTR(?, t.opt_gender)
		  AND INSTR(?, t.age_group)
		  AND INSTR(?, t.hospital)
	    AND t.`shortname` = ?
      AND (t.full_name like CONCAT('%', ?, '%') OR t.given_name SOUNDS LIKE ? OR t.family_name SOUNDS LIKE ?);";

  PREPARE stmt FROM @sqlString;

  SET @searchTerms = searchTerms;
  SET @statusFilter = statusFilter;
  SET @genderFilter = genderFilter;
  SET @ageFilter = ageFilter;
  SET @hospitalFilter = hospitalFilter;
  SET @incident = incident;


  EXECUTE stmt USING @statusFilter, @genderFilter, @ageFilter, @hospitalFilter, @incident,
                     @searchTerms, @searchTerms,@searchTerms;

  DEALLOCATE PREPARE stmt;

END $$

DELIMITER ;

2011/03/24
------------
DELIMITER $$

DROP PROCEDURE IF EXISTS `PLSearch2` $$
CREATE PROCEDURE `PLSearch2`(IN searchTerms CHAR(255),
	 IN statusFilter VARCHAR(100),
	 IN genderFilter VARCHAR(100),
	 IN ageFilter VARCHAR(100),
	 IN hospitalFilter VARCHAR(100),
	 IN incident VARCHAR(100),
	 IN sortBy VARCHAR(100),
	 IN pageStart INT,
	 IN perPage INT,
   OUT totalRows INT)
BEGIN


  /* Consider removing the relevance order by (case when ... ) because honestly it is just barely good enough. */

  SET @sqlString = "
		SELECT STRAIGHT_JOIN SQL_NO_CACHE
				`a`.`p_uuid`       AS `p_uuid`,
				`a`.`full_name`    AS `full_name`,
				`a`.`given_name`   AS `given_name`,
				`a`.`family_name`  AS `family_name`,
				(CASE WHEN `b`.`opt_status` NOT IN ('ali', 'mis', 'inj', 'dec', 'unk') OR `b`.`opt_status` IS NULL THEN 'unk' ELSE `b`.`opt_status` END) AS `opt_status`,
        DATE_FORMAT(b.updated, '%m/%e/%y @ %l:%i:%s %p') as updated,
				(CASE WHEN `c`.`opt_gender` NOT IN ('mal', 'fml') OR `c`.`opt_gender` IS NULL THEN 'unk' ELSE `c`.`opt_gender` END) AS `opt_gender`,
				(CASE WHEN CAST(`c`.`years_old` AS UNSIGNED) < 18 THEN 'child' WHEN CAST(`c`.`years_old` AS UNSIGNED) >= 18 THEN 'adult' ELSE 'unknown' END) as `age_group`,
				`i`.`image_height` AS `image_height`,
				`i`.`image_width`  AS `image_width`,
				`i`.`url_thumb`    AS `url_thumb`,
				(CASE WHEN `h`.`short_name` NOT IN ('nnmc', 'suburban') OR `h`.`short_name` IS NULL THEN 'other' ELSE `h`.`short_name` END)  AS `hospital`,
				(CASE WHEN (`h`.`hospital_uuid` = -(1)) THEN NULL ELSE `h`.`icon_url` END) AS `icon_url`,
				`inc`.`shortname`  AS `shortname`,
        `pm`.last_seen, `pm`.comments
		   FROM `person_uuid` `a`
		   JOIN `person_status` `b`     ON (`a`.`p_uuid` = `b`.`p_uuid` AND `b`.`isVictim` = 1 )
	  LEFT JOIN `image` `i`           ON `a`.`p_uuid` = `i`.`x_uuid`
		   JOIN `person_details` `c`    ON `a`.`p_uuid` = `c`.`p_uuid`
		   JOIN `incident` `inc`        ON (`inc`.`incident_id` = `a`.`incident_id` AND `a`.`incident_id` <> 0 )
	  LEFT JOIN `hospital` `h`        ON `h`.`hospital_uuid` = `a`.`hospital_uuid`
    LEFT JOIN `person_missing` `pm` ON pm.p_uuid = a.p_uuid
	  WHERE INSTR(?, 	(CASE WHEN `b`.`opt_status` NOT IN ('ali', 'mis', 'inj', 'dec', 'unk') OR `b`.`opt_status` IS NULL THEN 'unk' ELSE `b`.`opt_status` END))
	    AND INSTR(?, (CASE WHEN `c`.`opt_gender` NOT IN ('mal', 'fml') OR `c`.`opt_gender` IS NULL THEN 'unk' ELSE `c`.`opt_gender` END))
		  AND INSTR(?, (CASE WHEN CAST(`c`.`years_old` AS UNSIGNED) < 18 THEN 'child' WHEN CAST(`c`.`years_old` AS UNSIGNED) >= 18 THEN 'adult' ELSE 'unknown' END))
		  AND INSTR(?, (CASE WHEN `h`.`short_name` NOT IN ('nnmc', 'suburban') OR `h`.`short_name` IS NULL THEN 'other' ELSE `h`.`short_name` END))
	    AND `shortname` = ?
      AND (full_name like CONCAT('%', ?, '%'))
    ORDER BY ?
    LIMIT ?, ?";

  PREPARE stmt FROM @sqlString;

  SET @searchTerms = searchTerms;
  SET @statusFilter = statusFilter;
  SET @genderFilter = genderFilter;
  SET @ageFilter = ageFilter;
  SET @hospitalFilter = hospitalFilter;
  SET @incident = incident;
  SET @sortBy = sortBy;
  SET @pageStart = pageStart;
  SET @perPage = perPage;

  SET NAMES utf8;
  EXECUTE stmt USING @statusFilter, @genderFilter, @ageFilter, @hospitalFilter, @incident,
                     @searchTerms,@sortBy, @pageStart, @perPage;

  DEALLOCATE PREPARE stmt;

  SELECT COUNT(p.p_uuid) INTO totalRows
    FROM person_uuid p
    JOIN incident i
      ON p.incident_id = i.incident_id
   WHERE i.shortname = incident;


END $$

DELIMITER ;



2011:0401 Merwan
-----------------


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE `PLSearch`(
     IN searchTerms CHAR(255),
	 IN statusFilter VARCHAR(100),
	 IN genderFilter VARCHAR(100),
	 IN ageFilter VARCHAR(100),
	 IN hospitalFilter VARCHAR(100),
	 IN incidentName VARCHAR(100),
	 IN sortBy VARCHAR(100),
	 IN pageStart INT,
	 IN perPage INT,
    OUT totalRows INT

)
BEGIN

	DROP TABLE IF EXISTS tmp_names;
    IF searchTerms = '' THEN
            CREATE TEMPORARY TABLE tmp_names AS (
            SELECT SQL_NO_CACHE pu.*
                FROM person_uuid pu
                   JOIN incident i  ON (pu.incident_id = i.incident_id AND i.shortname = incidentName)
                  LIMIT 2000
         );

    ELSE
            CREATE TEMPORARY TABLE  tmp_names AS (
            SELECT SQL_NO_CACHE pu.*
                FROM person_uuid pu
                   JOIN incident i  ON (pu.incident_id = i.incident_id AND i.shortname = incidentName)
            WHERE full_name like CONCAT(searchTerms , '%')
            LIMIT 2000
            );
     END IF;

    SET @sqlString = "
    SELECT  SQL_NO_CACHE `tn`.`p_uuid`       AS `p_uuid`,
				`tn`.`full_name`    AS `full_name`,
				`tn`.`given_name`   AS `given_name`,
				`tn`.`family_name`  AS `family_name`,
				(CASE WHEN `ps`.`opt_status` NOT IN ('ali', 'mis', 'inj', 'dec', 'fnd') OR `ps`.`opt_status` IS NULL THEN 'unk' ELSE `ps`.`opt_status` END) AS `opt_status`,
				DATE_FORMAT(ps.last_updated, '%y-%m-%d %k:%i:%s') as updated,
				(CASE WHEN `pd`.`opt_gender` NOT IN ('mal', 'fml') OR `pd`.`opt_gender` IS NULL THEN 'unk' ELSE `pd`.`opt_gender` END) AS `opt_gender`,
				(CASE WHEN CAST(`pd`.`years_old` AS UNSIGNED) < 18 THEN 'child' WHEN CAST(`pd`.`years_old` AS UNSIGNED) >= 18 THEN 'adult' ELSE 'unknown' END) as `age_group`,
				`i`.`image_height` AS `image_height`,
				`i`.`image_width`  AS `image_width`,
				`i`.`url_thumb`    AS `url_thumb`,
				(CASE WHEN `h`.`short_name` NOT IN ('nnmc', 'suburban') OR `h`.`short_name` IS NULL THEN 'other' ELSE `h`.`short_name` END)  AS `hospital`,
				(CASE WHEN (`h`.`hospital_uuid` = -(1)) THEN NULL ELSE `h`.`icon_url` END) AS `icon_url`,
				`pm`.last_seen,
				`pm`.comments
			 FROM tmp_names tn
             JOIN person_status ps  ON (tn.p_uuid = ps.p_uuid AND ps.isVictim = 1 AND INSTR(?, 	(CASE WHEN ps.opt_status NOT IN ('ali', 'mis', 'inj', 'dec', 'fnd') OR ps.opt_status IS NULL THEN 'unk' ELSE  ps.opt_status END)))
             JOIN person_details pd ON (tn.p_uuid = pd.p_uuid AND INSTR(?, (CASE WHEN `opt_gender` NOT IN ('mal', 'fml') OR `opt_gender` IS NULL THEN 'unk' ELSE `opt_gender` END))
															  AND INSTR(?, (CASE WHEN CAST(`years_old` AS UNSIGNED) < 18 THEN 'child' WHEN CAST(`years_old` AS UNSIGNED) >= 18 THEN 'adult' ELSE 'unknown' END)))
			 LEFT
			 JOIN hospital h        ON (tn.hospital_uuid = h.hospital_uuid AND INSTR(?, (CASE WHEN `h`.`short_name` NOT IN ('nnmc', 'suburban') OR `h`.`short_name` IS NULL THEN 'other' ELSE `h`.`short_name` END)))
             LEFT
			 JOIN person_missing pm ON (tn.p_uuid = pm.p_uuid)
			 LEFT
			 JOIN image i			ON (tn.p_uuid = i.x_uuid)
           ORDER BY ?
			 LIMIT ?, ?;";

      PREPARE stmt FROM @sqlString;

      SET @statusFilter = statusFilter;
      SET @genderFilter = genderFilter;
      SET @ageFilter = ageFilter;
      SET @hospitalFilter = hospitalFilter;
      SET @sortBy = sortBy;
      SET @pageStart = pageStart;
      SET @perPage = perPage;

      SET NAMES utf8;
      EXECUTE stmt USING @statusFilter, @genderFilter, @ageFilter, @hospitalFilter,
                                                        @sortBy, @pageStart, @perPage;

      DEALLOCATE PREPARE stmt;



	DROP TABLE tmp_names;


      SELECT COUNT(p.p_uuid) INTO totalRows
          FROM person_uuid p
             JOIN incident i ON p.incident_id = i.incident_id
      WHERE i.shortname = incidentName;


END


------------------ ALL ITEMS BELOW IN STARTER DATABASE ALREADY -------------------------------------------

2011:0307 Greg
-----------------
Removed old reg module table
DROP TABLE  `reg` ;


2011:0303 Greg
-----------------
Removed BLOB as we don't use it:
ALTER TABLE  `image` DROP  `image` ;


2011:0302 Greg
-----------------
Additonal field for events added:
ALTER TABLE  `incident` ADD  `street` VARCHAR( 256 ) NULL DEFAULT NULL;

