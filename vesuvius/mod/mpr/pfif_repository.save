<?php
/**
 * @name         Missing Person Registry
 * @version      1.5
 * @package      mpr
 * @author       Carl H. Cornwell <ccornwell at aqulient dor com>
 * @about        Developed in whole or part by the U.S. National Library of Medicine and the Sahana Foundation
 * @link         https://pl.nlm.nih.gov/about
 * @link         http://sahanafoundation.org
 * @license	 http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License (LGPL)
 * @lastModified 2011.0307
 */



require_once("../../inc/handler_db.inc");
require_once("pfif_log.inc");
class Pfif_Repository {
    public $id;
    public $name;
    public $base_url;
    public $role;
    public $granularity;
    public $deleted_record;
    public $params;
    public $sched_interval_minutes;
    public $log_granularity;
    public $first_entry;
    public $last_entry;
    public $total_persons;
    public $total_notes;

    protected $harvest_log;
    protected $export_log;

    public function __construct()
    {
    }

    public function is_ready_for_import($import_time = null) {
        $sched_time = empty($now) ? time() : $import_time;
        // No log records exist, so ready for initial import.
        $log_end = $this->harvest_log->end_time;
        if ($this->first_entry == NULL || empty($log_end)) {
            return true;
        }

        // Check whether sched interval has elapsed since last log end_time
        $delta = $this->sched_interval_minutes * 60;
        return ((strtotime($log_end) + $delta) >= $import_time);
    }

    public function start_import($mode,$direction) {
        $start_time = time();
        $this->harvest_log->start($this->id,$start_time,$mode,$direction);
    }

    public function end_import($status,$info_array=array()) {
    }

    public function is_ready_for_export() {
    }

    public static function find($id) {
        $r_list = array();
        return $r_list;
    }

    public static function find_source($name = 'all') {
    global $global;
        $global['db']->SetFetchMode(ADODB_FETCH_ASSOC);
        $where_clause = "`role`='source' ";
        $where_clause .= ($name == 'all')
                                ? '' :
                                "AND `name` = '".addslashes($name)."'";
        $sql = "SELECT * from `pfif_repository` WHERE $where_clause";
        $rs = $global['db']->GetAssoc($sql);

        $r_list = false;
        if (!$rs) {
            error_log("ERROR: find_source failed! ".$global['db']->_errorMsg."\n");
        } else {
            foreach ($rs as $id => $row) {
//                var_dump($id,$row);
                $pr = new Pfif_Repository();
                $pr->id = $id;
                foreach ($row as $prop_name => $prop_value) {
                    $pr->$prop_name = $prop_value;
                }
                $log = self::get_last_harvest_log($id,'in');
                $pr->harvest_log = $log;
                $r_list[$id] = $pr;
                unset($prop_value);
            }
            unset($row);
        }

        return $r_list;
    }

    public static function find_sink($name = 'all') {
        $r_list = array();
        return $r_list;
    }

    public static function find_all($source_or_sink = 'all') {
        $r_list = array();
        return $r_list;
    }

    // TODO: What is the distiction between find_all and list_all ?
    public static function list_all($source_or_sink = 'all')
    {
        $r_list = array();
        return $r;
    }

    public function save() {};

    public function update() {};

    public static function get_last_harvest_log($repository_id,
                                                $direction) {
        global $global;

        $log = new Pfif_Harvest_Log();

        $global['db']->SetFetchMode(ADODB_FETCH_ASSOC);
        $where_clause = "`repository_id`='".$repository_id."' ";
        $where_clause .= "AND `direction` = '".$direction."' ";
        $where_clause .= "AND `start_mode` = 'scheduled' ";
        // $where_clause .= "AND NOT `status` = 'completed' ";

        $sql = "SELECT * from `pfif_harvest_log` WHERE $where_clause ".
               "ORDER BY start_time DESC";
        $rs = $global['db']->GetAssoc($sql);

        if ($rs) {
            foreach ($rs as $id => $row) {
                var_dump($id,$row);
            }
            unset($row);

            /* We only want to keep the first row */
            $log_row = $rs[0];
            foreach ($log_row as $prop_name => $prop_value) {
                $log->$prop_name = $prop_value;
            }
            unset($prop_value);
        // TODO: If there were multiple results, the earlier instances should be updated with status='error'
        } else {
            print "No log records found for query\n$sql\n";
        }

        return $log;
    }
}

